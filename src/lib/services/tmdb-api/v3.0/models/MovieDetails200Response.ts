/* tslint:disable */
/* eslint-disable */
/**
 * TMDB API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MovieDetails200ResponseProductionCompaniesInner } from './MovieDetails200ResponseProductionCompaniesInner';
import {
    MovieDetails200ResponseProductionCompaniesInnerFromJSON,
    MovieDetails200ResponseProductionCompaniesInnerFromJSONTyped,
    MovieDetails200ResponseProductionCompaniesInnerToJSON,
} from './MovieDetails200ResponseProductionCompaniesInner';
import type { MovieDetails200ResponseProductionCountriesInner } from './MovieDetails200ResponseProductionCountriesInner';
import {
    MovieDetails200ResponseProductionCountriesInnerFromJSON,
    MovieDetails200ResponseProductionCountriesInnerFromJSONTyped,
    MovieDetails200ResponseProductionCountriesInnerToJSON,
} from './MovieDetails200ResponseProductionCountriesInner';
import type { MovieDetails200ResponseGenresInner } from './MovieDetails200ResponseGenresInner';
import {
    MovieDetails200ResponseGenresInnerFromJSON,
    MovieDetails200ResponseGenresInnerFromJSONTyped,
    MovieDetails200ResponseGenresInnerToJSON,
} from './MovieDetails200ResponseGenresInner';
import type { MovieDetails200ResponseSpokenLanguagesInner } from './MovieDetails200ResponseSpokenLanguagesInner';
import {
    MovieDetails200ResponseSpokenLanguagesInnerFromJSON,
    MovieDetails200ResponseSpokenLanguagesInnerFromJSONTyped,
    MovieDetails200ResponseSpokenLanguagesInnerToJSON,
} from './MovieDetails200ResponseSpokenLanguagesInner';

/**
 * 
 * @export
 * @interface MovieDetails200Response
 */
export interface MovieDetails200Response {
    /**
     * 
     * @type {boolean}
     * @memberof MovieDetails200Response
     */
    adult?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    backdrop_path?: string;
    /**
     * 
     * @type {any}
     * @memberof MovieDetails200Response
     */
    belongs_to_collection?: any;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    budget?: number;
    /**
     * 
     * @type {Array<MovieDetails200ResponseGenresInner>}
     * @memberof MovieDetails200Response
     */
    genres?: Array<MovieDetails200ResponseGenresInner>;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    homepage?: string;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    imdb_id?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    original_language?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    original_title?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    popularity?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    poster_path?: string;
    /**
     * 
     * @type {Array<MovieDetails200ResponseProductionCompaniesInner>}
     * @memberof MovieDetails200Response
     */
    production_companies?: Array<MovieDetails200ResponseProductionCompaniesInner>;
    /**
     * 
     * @type {Array<MovieDetails200ResponseProductionCountriesInner>}
     * @memberof MovieDetails200Response
     */
    production_countries?: Array<MovieDetails200ResponseProductionCountriesInner>;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    release_date?: string;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    revenue?: number;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    runtime?: number;
    /**
     * 
     * @type {Array<MovieDetails200ResponseSpokenLanguagesInner>}
     * @memberof MovieDetails200Response
     */
    spoken_languages?: Array<MovieDetails200ResponseSpokenLanguagesInner>;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    tagline?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    title?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MovieDetails200Response
     */
    video?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    vote_average?: number;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    vote_count?: number;
}

/**
 * Check if a given object implements the MovieDetails200Response interface.
 */
export function instanceOfMovieDetails200Response(value: object): value is MovieDetails200Response {
    return true;
}

export function MovieDetails200ResponseFromJSON(json: any): MovieDetails200Response {
    return MovieDetails200ResponseFromJSONTyped(json, false);
}

export function MovieDetails200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MovieDetails200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'adult': json['adult'] == null ? undefined : json['adult'],
        'backdrop_path': json['backdrop_path'] == null ? undefined : json['backdrop_path'],
        'belongs_to_collection': json['belongs_to_collection'] == null ? undefined : json['belongs_to_collection'],
        'budget': json['budget'] == null ? undefined : json['budget'],
        'genres': json['genres'] == null ? undefined : ((json['genres'] as Array<any>).map(MovieDetails200ResponseGenresInnerFromJSON)),
        'homepage': json['homepage'] == null ? undefined : json['homepage'],
        'id': json['id'] == null ? undefined : json['id'],
        'imdb_id': json['imdb_id'] == null ? undefined : json['imdb_id'],
        'original_language': json['original_language'] == null ? undefined : json['original_language'],
        'original_title': json['original_title'] == null ? undefined : json['original_title'],
        'overview': json['overview'] == null ? undefined : json['overview'],
        'popularity': json['popularity'] == null ? undefined : json['popularity'],
        'poster_path': json['poster_path'] == null ? undefined : json['poster_path'],
        'production_companies': json['production_companies'] == null ? undefined : ((json['production_companies'] as Array<any>).map(MovieDetails200ResponseProductionCompaniesInnerFromJSON)),
        'production_countries': json['production_countries'] == null ? undefined : ((json['production_countries'] as Array<any>).map(MovieDetails200ResponseProductionCountriesInnerFromJSON)),
        'release_date': json['release_date'] == null ? undefined : json['release_date'],
        'revenue': json['revenue'] == null ? undefined : json['revenue'],
        'runtime': json['runtime'] == null ? undefined : json['runtime'],
        'spoken_languages': json['spoken_languages'] == null ? undefined : ((json['spoken_languages'] as Array<any>).map(MovieDetails200ResponseSpokenLanguagesInnerFromJSON)),
        'status': json['status'] == null ? undefined : json['status'],
        'tagline': json['tagline'] == null ? undefined : json['tagline'],
        'title': json['title'] == null ? undefined : json['title'],
        'video': json['video'] == null ? undefined : json['video'],
        'vote_average': json['vote_average'] == null ? undefined : json['vote_average'],
        'vote_count': json['vote_count'] == null ? undefined : json['vote_count'],
    };
}

export function MovieDetails200ResponseToJSON(value?: MovieDetails200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'adult': value['adult'],
        'backdrop_path': value['backdrop_path'],
        'belongs_to_collection': value['belongs_to_collection'],
        'budget': value['budget'],
        'genres': value['genres'] == null ? undefined : ((value['genres'] as Array<any>).map(MovieDetails200ResponseGenresInnerToJSON)),
        'homepage': value['homepage'],
        'id': value['id'],
        'imdb_id': value['imdb_id'],
        'original_language': value['original_language'],
        'original_title': value['original_title'],
        'overview': value['overview'],
        'popularity': value['popularity'],
        'poster_path': value['poster_path'],
        'production_companies': value['production_companies'] == null ? undefined : ((value['production_companies'] as Array<any>).map(MovieDetails200ResponseProductionCompaniesInnerToJSON)),
        'production_countries': value['production_countries'] == null ? undefined : ((value['production_countries'] as Array<any>).map(MovieDetails200ResponseProductionCountriesInnerToJSON)),
        'release_date': value['release_date'],
        'revenue': value['revenue'],
        'runtime': value['runtime'],
        'spoken_languages': value['spoken_languages'] == null ? undefined : ((value['spoken_languages'] as Array<any>).map(MovieDetails200ResponseSpokenLanguagesInnerToJSON)),
        'status': value['status'],
        'tagline': value['tagline'],
        'title': value['title'],
        'video': value['video'],
        'vote_average': value['vote_average'],
        'vote_count': value['vote_count'],
    };
}

